// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("client")
  bio           String?
  hashedPassword String?
  accounts      Account[]
  sessions      Session[]
  jobs          Job[]     @relation("JobPoster")
  applications  Job[]     @relation("JobApplicant")
  givenReviews  Review[]  @relation("ReviewGiver")
  receivedReviews Review[] @relation("ReviewReceiver")
  givenVotes    Vote[]    @relation("VoteGiver")
  receivedVotes Vote[]    @relation("VoteReceiver")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Job {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  budget      Float
  skills      String[]
  category    String
  status      String   @default("open") // open, in_progress, completed, cancelled
  posterId    String
  poster      User     @relation("JobPoster", fields: [posterId], references: [id])
  applicantId String?
  applicant   User?    @relation("JobApplicant", fields: [applicantId], references: [id])
  reviews     Review[] @relation("JobReviews")
  votes       Vote[]   @relation("JobVotes")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id          String   @id @default(cuid())
  rating      Int      @db.SmallInt // 1-5 stars
  comment     String   @db.Text
  jobId       String
  job         Job      @relation("JobReviews", fields: [jobId], references: [id])
  giverId     String
  giver       User     @relation("ReviewGiver", fields: [giverId], references: [id])
  receiverId  String
  receiver    User     @relation("ReviewReceiver", fields: [receiverId], references: [id])
  isBiased    Boolean  @default(false)
  biasReason  String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([jobId, giverId, receiverId])
}

model Vote {
  id          String   @id @default(cuid())
  value       Int      @db.SmallInt // 1 for upvote, -1 for downvote
  jobId       String?
  job         Job?     @relation("JobVotes", fields: [jobId], references: [id])
  giverId     String
  giver       User     @relation("VoteGiver", fields: [giverId], references: [id])
  receiverId  String
  receiver    User     @relation("VoteReceiver", fields: [receiverId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([giverId, receiverId])
  @@unique([giverId, jobId])
}
